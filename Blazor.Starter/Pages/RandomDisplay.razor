@page "/randomdisplay"
<div class="container m-2 px-3 p-t bg-primary text-white">
    <div class="row">
        <div class="col-12">
            <h3>Random Test</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-2">Number</div>
        <div class="col-2">@RdmService.Value</div>
        <div class="col-2"><button class="btn btn-secondary" @onclick="(e) => NewRandomNumber()">New Number</button></div>
    </div>
    <div class="row bg-dark mt-2">
        <div class="col-3">
            Initialized:
        </div>
        <div class="col-1">
            @this.InitRun
        </div>
        <div class="col-3">
            Params Set:
        </div>
        <div class="col-1">
            @this.ParamsSetRun
        </div>
        <div class="col-3">
            Rendered:
        </div>
        <div class="col-1">
            @this.Rendered
        </div>
    </div>
</div>

<NumberDispay @ref="numberDispay1">
</NumberDispay>

<NumberDispay>
    <NumberDispay>
    </NumberDispay>
</NumberDispay>

<NumberDispay>
    <NumberDispay>
    </NumberDispay>
</NumberDispay>

@code {

    [Inject] private RandomNumberService RdmService { get; set; }

    private NumberDispay numberDispay1 { get; set; }

    private void NewRandomNumber()
        => RdmService.NewNumber();

    private int InitRun = 0;
    private int ParamsSetRun = 0;
    private int Rendered = 1;

    protected override Task OnInitializedAsync()
    {
        InitRun++;
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        this.ParamsSetRun++;
        return base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        Rendered++;
        return true;
    }

}
