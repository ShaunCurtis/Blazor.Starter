@page "/"
@page "/editortest"

@implements IDisposable
@implements IAsyncDisposable

<h3>EditorTest</h3>

<InheritedDivComponent></InheritedDivComponent>

<MyComponent></MyComponent>

<EditForm EditContext="editContext">
    @*<div>
            <SwitchedEditorComponent>
                <EditControl>
                    Email: <InputText @bind-Value="model.Email" placeholder="Enter your Email Address"></InputText>
                </EditControl>
                <ViewControl>
                    Email: <InputText @bind-Value="model.Email" disabled></InputText>
                </ViewControl>
            </SwitchedEditorComponent>
        </div>*@
    <div>
        <FormEditControl @bind-Value="model.Email" ShowValidation="true" HelperText="Enter a valid Email Address" IsRequired="true"></FormEditControl>
        <div>
            Value = @model.Email
        </div>
    </div>
    <div>
        <InputText @ref="myInputText" class="form-control" @bind-Value="this.model.Email"></InputText>
        <CustomDate @bind-Value="model.Date" DisplayName="EMail"></CustomDate>
        @*<ValidationMessage For="() => model.Date"></ValidationMessage>*@
    </div>
    <InputDate @bind-Value="model.MyDate"></InputDate>
</EditForm>
<input type="date" @bind-value="this.MyDate" />
<div class="m-3 p-3"><input @bind-value="_errormessage"><button class="btn btn-dark ms-2" @onclick="SetError">Set Error</button></div>

<form class="row g-3">
    <div class="col-md-4">
        <label for="validationServer01" class="form-label">First name</label>
        <input type="text" class="form-control is-valid" id="validationServer01" value="Mark" required>
        <div class="valid-feedback">
            Looks good!
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationServer02" class="form-label">Last name</label>
        <input type="text" class="form-control is-valid" id="validationServer02" value="Otto" required>
        <div class="valid-feedback">
            Looks good!
        </div>
    </div>
    <div class="col-md-4">
        <label for="validationServerUsername" class="form-label">Username</label>
        <div class="input-group has-validation">
            <span class="input-group-text" id="inputGroupPrepend3">&#64</span>
            <input type="text" class="form-control is-invalid" id="validationServerUsername" aria-describedby="inputGroupPrepend3 validationServerUsernameFeedback" required>
            <div id="validationServerUsernameFeedback" class="invalid-feedback">
                Please choose a username.
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <label for="validationServer03" class="form-label">City</label>
        <input type="text" class="form-control is-invalid" id="validationServer03" aria-describedby="validationServer03Feedback" required>
        <div id="validationServer03Feedback" class="invalid-feedback">
            Please provide a valid city.
        </div>
    </div>
    <div class="col-md-3">
        <label for="validationServer04" class="form-label">State</label>
        <select class="form-select is-invalid" id="validationServer04" aria-describedby="validationServer04Feedback" required>
            <option selected disabled value="">Choose...</option>
            <option>...</option>
        </select>
        <div id="validationServer04Feedback" class="invalid-feedback">
            Please select a valid state.
        </div>
    </div>
    <div class="col-md-3">
        <label for="validationServer05" class="form-label">Zip</label>
        <input type="text" tabindex="0" @ref="myFocusInput" class="form-control is-invalid" id="validationServer05" aria-describedby="validationServer05Feedback" required>
        <div id="validationServer05Feedback" class="invalid-feedback">
            Please provide a valid zip.
        </div>
    </div>
    <div class="col-12">
        <div class="form-check">
            <input class="form-check-input is-invalid" @ref="myFocusInput" type="checkbox" value="" id="invalidCheck3" aria-describedby="invalidCheck3Feedback" required>
            <label class="form-check-label" for="invalidCheck3">
                Agree to terms and conditions
            </label>
            <div id="invalidCheck3Feedback" class="invalid-feedback">
                You must agree before submitting.
            </div>
        </div>
    </div>
    <div class="col-12">
        <button class="btn btn-primary" type="submit">Submit form</button>
    </div>
</form>

<div cklass="m-2 p-2">
    <button class="btn @buttonCss" @onclick="ToggleDirty">@buttonText</button>
</div>

<div cklass="m-2 p-2">
    <button class="btn btn-dark" @onclick="Focus">@buttonText</button>
</div>
<div>
    <a href="/Fred/1/Open">Got to Fred</a>
</div>

@code {

    public ElementReference myFocusInput;

    [Inject] private IStoredDataService? StoredDataService { get; set; }

    [Inject] private IJSRuntime _js { get; set; }

    public readonly Guid UniqueId = new Guid("d7946ef9-1821-4f8b-b029-9b1526031f53");

    private dataModel model { get; set; } = new dataModel();

    private EditContext? editContext;

    private ValidationMessageStore? _messageStore;

    private string _errormessage { get; set; } = "Error in date";

    private bool _setAsBackPage;

    private InputText myInputText;

    protected async override Task OnInitializedAsync()
    {
        if (StoredDataService != null)
        {
            var data = await StoredDataService.GetStoredData(UniqueId);
            if (data != null)
            {
                var obj = System.Text.Json.JsonSerializer.Deserialize<dataModel>(data.Data);
                this.model = (dataModel)obj;
                _setAsBackPage = true;
            }
        }
        this.editContext = new EditContext(model);
        this.editContext.OnFieldChanged += FieldChanged;
        _messageStore = new ValidationMessageStore(this.editContext);

        //return base.OnInitializedAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (_setAsBackPage)
            await SetBackPage("/");
        _setAsBackPage = false;
    }


    private void FieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (this.editContext != null)
        {
            _messageStore.Clear();
        }

    }

    private void Focus()
      => _js.InvokeAsync<bool>("SetElementFocus", myFocusInput);

    private bool isDirty = false;
    private string buttonText => isDirty ? "Set Clean" : "Set Dirty";
    private string buttonCss => isDirty ? "btn-danger" : "btn-success";

    protected async void ToggleDirty()
    {
        isDirty = !isDirty;
        if (isDirty)
            await SetBackPage("/");
    }

    public ValueTask<bool> SetBackPage(string url)
      => _js.InvokeAsync<bool>("SetBackPage", url);


    private void SetError(MouseEventArgs e)
    {
        if (this.editContext != null)
        {
            var validationMessageStore = new ValidationMessageStore(this.editContext);
            this._messageStore.Clear();

            validationMessageStore.Clear();
            var fi = new FieldIdentifier(this.model, "Date");
            this._messageStore.Add(fi, _errormessage);
            this._messageStore.Add(new FieldIdentifier(this.model, "Email"), _errormessage);
        }
    }

    public class dataModel
    {
        public string? Email { get; set; }
        public DateTime? Date { get; set; }

        public DateTime? MyDate
        {
            get => _myDate;
            set
            {
                if (value != null)
                {
                    var date = (DateTime)value;
                    _myDate = date.AddDays(-(int)date.DayOfWeek);
                }
            }
        }
        private DateTime? _myDate;
    }

    public DateTime? MyDate
    {
        get => _myDate;
        set
        {
            if (value != null)
            {
                var date = (DateTime)value;
                _myDate = date.AddDays(-(int)date.DayOfWeek);
            }
        }
    }
    private DateTime? _myDate;

    public void Dispose()
    {
        var x = true;
    }

    public ValueTask DisposeAsync()
    {
        if (isDirty)
        {
            var mod = new dataModel { Email = "me@me.com", Date = DateTime.Now };
            //var json = System.Text.Json.JsonSerializer.Serialize(this.model);
            var json = System.Text.Json.JsonSerializer.Serialize(mod);
            var data = new StoredData() { Data = json, UniqueId = this.UniqueId };
            StoredDataService.SetStoredData(data);
        }
        return ValueTask.CompletedTask;
    }

}
