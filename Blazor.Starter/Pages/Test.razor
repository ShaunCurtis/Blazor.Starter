@page "/Test"
@implements IDisposable

    @foreach (var row in rows)
    {
        <input @onkeydown="(e) => KeyDown(e, row, this)" @ref="addInput" value="@row">
    }

<h3>@MyBase.Message</h3>
@code {

    [Inject] private BaseService MyBase { get; set; }

    void ConsumerMethod()
    {
        var x = MyBase.Message;
    }

    void SetterMethod()
    {
        MyBase.Message = "Bonjour";
    }

    protected override Task OnInitializedAsync()
    {
        MyBase.MessageChanged += UpdateHandler;
        return base.OnInitializedAsync();
    }

    private void UpdateHandler(object sender, EventArgs e)
            => this.InvokeAsync(StateHasChanged);

    private List<string> rows = new List<string>() { "UK", "France", "Germany", "Australia" };

    private List<ElementReference> inputs = new List<ElementReference>();

    private ElementReference addInput
    {
        set => inputs.Add(value);
    }

    private Task KeyDown(KeyboardEventArgs args, string row, object sender)
    {
        if (args.Code == "ArrowDown")
        {
            //TODO: Find out which dynamic MyInput-instance
            //      within the inputs collection triggered the event
        }
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        MyBase.MessageChanged -= UpdateHandler;
    }
}
