@page "/"

<h2>Home Page</h2>
<EditForm EditContext="this.editContext">
    @foreach (var modelData in _model.data)
    {
        <div>
            <InputNumber @bind-Value="modelData.Amount"></InputNumber>
        </div>
        <div>
            Value: @modelData.Amount
        </div>
    }
</EditForm>

<input type="text" name="name" value="@_someField" />

<button type="button" @onclick="UpdateSomeField">Update</button>

<button type="button" @onclick="SetCss">SetCss</button>

<div class="scroll" @onscroll="OnScroll">
    It is a good platform to learn programming.
    It is an educational website. Prepare for the Recruitment drive
    of product based companies like Microsoft, Amazon, Adobe etc with
    a free online placement preparation course. The course focuses
    on various MCQ's & Coding question likely to be asked in the
    interviews & make your upcoming placement season efficient and
    successful. Also, any geeks can help other geeks by writing
    articles on the GeeksforGeeks, publishing articles follow few
    steps that are Articles that need little modification/improvement
    from reviewers are published first. To quickly get your articles
    reviewed, please refer existing articles, their formatting style,
    coding style, and try to make you are close to them. In case you
    are a beginner, you may refer Guidelines to write an Article
</div>

<BaseModalDialog @ref="Modal"></BaseModalDialog>

<style>
    h1 {
        color: Green;
    }

    div.scroll {
        margin: 4px, 4px;
        padding: 4px;
        width: 500px;
        height: 110px;
        overflow-x: hidden;
        overflow-y: auto;
        text-align: justify;
    }
</style>

@code {

    [Inject] private IJSRuntime _js { get; set; }

    private BaseModalDialog Modal { get; set; }

    private string _someField;

    private string someField;

    private void OnScroll()
        {
        var x = true;
        }

    private void UpdateSomeField()
    {
        someField = _someField;
        // Update Database
    }

    private bool _isbodyCss;

    private string _bodyCss => _isbodyCss ? "Theme-Dark" : "Theme-Light";

    public async Task SetCss()
    {
        var appJsInterop = new AppJsInterop(_js);
        await appJsInterop.SetBodyCss("BlazorMainBody", _bodyCss);
        _isbodyCss = !_isbodyCss;
    }

    public class ModelData
    {
        public int Amount { get; set; }
    }

    public class Model
    {
        public List<ModelData> data = new List<ModelData> {
            new ModelData { Amount = 12},
            new ModelData { Amount = 10},
            new ModelData { Amount = 8},
            new ModelData { Amount = 6},
        };
    }

    private EditContext editContext;

    protected Model _model { get; set; } = new Model();

    protected override Task OnInitializedAsync()
    {
        editContext = new EditContext(_model);
        return base.OnInitializedAsync();
    }

}