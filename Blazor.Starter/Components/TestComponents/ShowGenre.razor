@implements IDisposable

<div class="container bg-info text-white m-2 px-3 pt-3 pb-0">
    <div class="row">
        <div class="col-12">
            <h3>@Title</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-2">
            Genre:
        </div>
        <div class="col-4">
            @this.DataService.Genre
        </div>
    </div>
    <div class="row bg-dark">
        <div class="col-3">
            Init:
        </div>
        <div class="col-1">
            @this.InitRun
        </div>
        <div class="col-3">
            Params Set:
        </div>
        <div class="col-1">
            @this.ParamsSetRun
        </div>
        <div class="col-3">
            Rendered:
        </div>
        <div class="col-1">
            @this.Rendered
        </div>
    </div>
</div>

@code {

    [Inject] public DataService DataService { get; set; }

    [Parameter]public bool WireUp { get; set; }

    [Parameter] public bool UseUpdateTrigger { get; set; }

    [Parameter] public string Title { get; set; } = "Genre Control";

    private int InitRun = 0;
    private int ParamsSetRun = 0;
    private int Rendered = 1;

    protected override Task OnInitializedAsync()
    {
        this.InitRun++;
        if (this.WireUp) DataService.RecordChanged += this.OnDataChanged;
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        this.ParamsSetRun++;
        return base.OnParametersSetAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Rendered++;
        return base.OnAfterRenderAsync(firstRender);
    }

    private void OnDataChanged(object sender, EventArgs e)
        => this.InvokeAsync(this.StateHasChanged);

    public void Dispose()
    {
        if (this.WireUp) DataService.RecordChanged -= this.OnDataChanged;
    }

}
